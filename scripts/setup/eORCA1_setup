#!/bin/bash
# Lightweight script to set up eORCA1 on ARCHER2
 
display_usage() { 
   echo
   echo "  Auto-Config: eORCA1 on ARCHER2"
   echo "  ***************************************"
   echo
   echo "  usage: ${0##*/} -w path_to_install_nemo -x path_to_intall_xios -s path_to_repo -f path_to_fabm-ersem"
   echo
   echo "  flags:  -w full path to where nemo will be installed"
   echo "          -x full path to where xios will be installed"
   echo "          -s full path to where eORCA1 repository resides"
   echo "          -f full path to where fabm-ersem was built"
   echo
   exit 1
	} 
# if less than three arguments supplied, display usage 
	if [  $# -le 5 ] 
	then 
		display_usage
		exit 1
	fi 
# if less than two arguments supplied, display usage 
	if [  $# -ge 9 ] 
	then 
		display_usage
		exit 1
	fi 
# check whether user had supplied -h or --help . If yes display usage 
	if [[ ( $# == "--help") ||  $# == "-h" ]] 
	then 
		display_usage
		exit 0
	fi 

while getopts w:x:s:f: option
  do
  case "${option}"
  in
  w) export WORK_DIR=${OPTARG};;
  x) export XIOS_DIR=${OPTARG};;
  s) export REPO_DIR=${OPTARG};;
  f) export FABM_DIR=${OPTARG};;
  esac
done

if [ ${WORK_DIR:0:1} != "/" ]; then
  echo "WORK_DIR must use full path"
  exit 1
fi

if [ ${XIOS_DIR:0:1} != "/" ]; then
  echo "XIOS_DIR must use full path"
  exit 1
fi

if [ ${REPO_DIR:0:1} != "/" ]; then
  echo "REPO_DIR must use full path"
  exit 1
fi

if [ ${FABM_DIR:0:1} != "/" ]; then
  echo "FABM_DIR must use full path"
  exit 1
fi

# Change to some working directory of choice
if [ ! -d "$WORK_DIR" ]; then
  mkdir $WORK_DIR
fi
cd $WORK_DIR

# clean old stuff
rm -rf $WORK_DIR/*

echo "Making sure that the correct modules are loaded"


module purge
source $REPO_DIR/scripts/env/ucx_env

# Currently running 4.0.4
NEMO_VER=4.0.4

# Checkout the NEMO code from the SVN Paris repository 
echo "Checking out NEMO repository"

#git clone https://gitlab.ecosystem-modelling.pml.ac.uk/gle/nemo404.git nemo
git clone https://github.com/pmlmodelling/NEMO4.0-FABM nemo

cd nemo
#rsync -aP /work/n01/n01/gig/eORCA1/trcice.F90 ./src/TOP/trcice.F90

# Setup the directory structure for the ENSEMBLE
mkdir $WORK_DIR/nemo/cfgs/eORCA1
# Define the location of where the eORCA1 forcing files are to be downloaded 
export DOWNLOAD_DIR="$WORK_DIR/nemo/cfgs/eORCA1/EXP00/"

echo $XIOS_DIR
# Choose an appropriate directory for your XIOS installation
if [ ! -d "$XIOS_DIR" ]; then
  mkdir $XIOS_DIR
fi
cd $XIOS_DIR

echo $PWD
echo "Checking out xios repository"
svn co http://forge.ipsl.jussieu.fr/ioserver/svn/XIOS/branchs/xios-2.5 xios
cd xios
cp $REPO_DIR/arch/xios/* ./arch
#cp $REPO_DIR/xios_arch/* ./arch
#cp $WORK_DIR/../xios_arch/* ./arch
echo "Compiling xios"
#./make_xios --full --prod --arch GCC_ARCHER2 --netcdf_lib netcdf4_par --job 4
./make_xios --full --debug --arch GCC_ARCHER2 --netcdf_lib netcdf4_par --job 4
# Dirty fix here as xios has to unpack before we can edit
sed -e "s/FC_MODSEARCH => '',  /FC_MODSEARCH => '-J',/" tools/FCM/lib/Fcm/Config.pm > tmp_file
mv tmp_file tools/FCM/lib/Fcm/Config.pm
# Try once more
#./make_xios --full --prod --arch GCC_ARCHER2 --netcdf_lib netcdf4_par --job 4
./make_xios --full --debug --arch GCC_ARCHER2 --netcdf_lib netcdf4_par --job 4

# Let's update the path to xios
export XIOS_DIR=$XIOS_DIR/xios
export XIOS_HOME=$XIOS_DIR


#fabm-ersem must be built beforehand!
# not sure this $MODE serves some purpose!
#MODE=nemo-prod-ERSEM-edge
MODE=nemo

export FABM_HOME=$FABM_DIR

cd $WORK_DIR/nemo
cp $REPO_DIR/arch/nemo/* ./arch
# Dirty fix to hard wire path otherwise user will have to set XIOS_DIR in every new shell session
sed "s?XXX_XIOS_DIR_XXX?$XIOS_DIR?" ./arch/arch-archer2.fcm > tmp_arch
mv tmp_arch ./arch/arch-archer2.fcm

echo 'eORCA1 OCE TOP ICE' >> $WORK_DIR/nemo/cfgs/work_cfgs.txt

mkdir cfgs/eORCA1/EXP00
echo "Gathering forcing data"

export CONFIG_DIR=$WORK_DIR/nemo/cfgs/eORCA1

# Set up EXP00 for quick testing of the unforced case

cd $CONFIG_DIR/EXP00
#ln -s ../../SHARED/namelist_ref namelist_ref
#ln -s ../../SHARED/namelist_ice_ref namelist_ice_ref
ln -s ../../SHARED/grid_def_nemo.xml grid_def_nemo.xml
ln -s ../../SHARED/field_def_nemo-oce.xml field_def_nemo-oce.xml
ln -s ../../SHARED/field_def_nemo-ice.xml field_def_nemo-ice.xml
ln -s ../../SHARED/domain_def_nemo.xml domain_def_nemo.xml
ln -s ../../SHARED/axis_def_nemo.xml axis_def_nemo.xml
ln -s ../INPUTS INPUTS

mkdir meta_out
mkdir RESTARTS
mkdir OUTPUTS

cd ../
mkdir INPUTS

wget -r -nd -np -e robots=off -A '*.nc' http://gws-access.jasmin.ac.uk/public/jmmp_collab/eORCA1/ -P $CONFIG_DIR/INPUTS/

cp /work/n01/shared/gig/MA_PML_INPUTS/eORCA1-CCI-ady-broadband-climatology-1997-2020.nc $CONFIG_DIR/INPUTS/
#cp /work/n01/shared/gig/MA_PML_INPUTS/ndep-nhx_histsoc_monthly_1901_2018_atmosgrid_v6.nc $CONFIG_DIR/INPUTS/ #done by setAnnuallinks
#cp /work/n01/shared/gig/MA_PML_INPUTS/ndep-noy_histsoc_monthly_1901_2018_atmosgrid_v3.nc $CONFIG_DIR/INPUTS/
cp /work/n01/shared/gig/MA_PML_INPUTS/dust_orca_nM_eORCA1_v2.nc $CONFIG_DIR/INPUTS/
cp /work/n01/shared/gig/MA_dummy_inputs/pCO2a.nc $CONFIG_DIR/INPUTS/
ln -s $CONFIG_DIR/INPUTS/* $CONFIG_DIR/EXP00/INPUTS/

ln -s $XIOS_DIR/bin/xios_server.exe $CONFIG_DIR/EXP00/xios_server.exe

cp $REPO_DIR/EXP00/* $CONFIG_DIR/EXP00/
cp -r $REPO_DIR/MY_SRC $CONFIG_DIR
cp $REPO_DIR/cpp_eORCA1.fcm $CONFIG_DIR

cp /work/n01/n01/gig/eORCA1/RUNSCRIPT/MULTIMONTH/* $CONFIG_DIR/EXP00/

cd $WORK_DIR/nemo/ext/FCM/lib/Fcm
sed -e "s/FC_MODSEARCH => '',  /FC_MODSEARCH => '-J',/" Config.pm > tmp_file
mv tmp_file Config.pm

cd $WORK_DIR/nemo

#cp $WORK_DIR/../ref_cfgs.txt $WORK_DIR/nemo/cfgs/ref_cfgs.txt

echo "Compiling nemo eORCA1 Config"
./makenemo -m GCC_ARCHER2_DEBUG -r eORCA1 -j 8

echo
echo "  Auto-Config: eORCA1"
echo "  *****************************"
echo
echo "  To run the eORCA1 Configuration:"
echo
echo "  - update the runscript accordingly "
echo "      (project code, nodes, modules, etc)"
echo
echo "  - submit via the slurm command"
echo    
